import { __decorate, __extends } from "tslib";
import { Component, Input } from '@angular/core';
import { FaIconComponent } from './icon.component';
import * as ɵngcc0 from '@angular/core';
var FaDuotoneIconComponent = /** @class */ (function (_super) {
    __extends(FaDuotoneIconComponent, _super);
    function FaDuotoneIconComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FaDuotoneIconComponent.prototype.findIconDefinition = function (i) {
        var lookup = _super.prototype.findIconDefinition.call(this, i);
        if (lookup != null && lookup.prefix !== 'fad') {
            throw new Error('The specified icon does not appear to be a Duotone icon. ' +
                'Check that you specified the correct style: ' +
                ("<fa-duotone-icon [icon]=\"['fab', '" + lookup.iconName + "']\"></fa-duotone-icon> ") +
                ("or use: <fa-icon icon=\"" + lookup.iconName + "\"></fa-icon> instead."));
        }
        return lookup;
    };
    FaDuotoneIconComponent.prototype.buildParams = function () {
        var params = _super.prototype.buildParams.call(this);
        if (this.swapOpacity === true || this.swapOpacity === 'true') {
            params.classes.push('fa-swap-opacity');
        }
        if (this.primaryOpacity != null) {
            params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();
        }
        if (this.secondaryOpacity != null) {
            params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();
        }
        if (this.primaryColor != null) {
            params.styles['--fa-primary-color'] = this.primaryColor;
        }
        if (this.secondaryColor != null) {
            params.styles['--fa-secondary-color'] = this.secondaryColor;
        }
        return params;
    };
    __decorate([
        Input()
    ], FaDuotoneIconComponent.prototype, "swapOpacity", void 0);
    __decorate([
        Input()
    ], FaDuotoneIconComponent.prototype, "primaryOpacity", void 0);
    __decorate([
        Input()
    ], FaDuotoneIconComponent.prototype, "secondaryOpacity", void 0);
    __decorate([
        Input()
    ], FaDuotoneIconComponent.prototype, "primaryColor", void 0);
    __decorate([
        Input()
    ], FaDuotoneIconComponent.prototype, "secondaryColor", void 0);
FaDuotoneIconComponent.ɵfac = function FaDuotoneIconComponent_Factory(t) { return ɵFaDuotoneIconComponent_BaseFactory(t || FaDuotoneIconComponent); };
FaDuotoneIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FaDuotoneIconComponent, selectors: [["fa-duotone-icon"]], inputs: { swapOpacity: "swapOpacity", primaryOpacity: "primaryOpacity", secondaryOpacity: "secondaryOpacity", primaryColor: "primaryColor", secondaryColor: "secondaryColor" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function FaDuotoneIconComponent_Template(rf, ctx) { }, encapsulation: 2 });
var ɵFaDuotoneIconComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FaDuotoneIconComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FaDuotoneIconComponent, [{
        type: Component,
        args: [{
                selector: 'fa-duotone-icon',
                template: ""
            }]
    }], null, { swapOpacity: [{
            type: Input
        }], primaryOpacity: [{
            type: Input
        }], secondaryOpacity: [{
            type: Input
        }], primaryColor: [{
            type: Input
        }], secondaryColor: [{
            type: Input
        }] }); })();
    return FaDuotoneIconComponent;
}(FaIconComponent));
export { FaDuotoneIconComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVvdG9uZS1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L0Bmb3J0YXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lL2ljb24vZHVvdG9uZS1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQU1uRDtBQUNFLElBRDBDLDBDQUFlO0FBQUMsSUFBNUQ7QUFBb0M7QUFFSyxJQTRFekMsQ0FBQztBQUNELElBckNZLG1EQUFrQixHQUE1QixVQUE2QixDQUE0QjtBQUFJLFFBQzNELElBQU0sTUFBTSxHQUFHLGlCQUFNLGtCQUFrQixZQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLFFBQ0ksSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO0FBQ25ELFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQ7QUFDbkUsZ0JBQVUsOENBQThDO0FBQ3hELGlCQUFVLHdDQUFxQyxNQUFNLENBQUMsUUFBUSw2QkFBeUIsQ0FBQTtBQUN2RixpQkFBVSw2QkFBMEIsTUFBTSxDQUFDLFFBQVEsMkJBQXVCLENBQUEsQ0FDbkUsQ0FBQztBQUNSLFNBQUs7QUFDTCxRQUNJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztBQUVILElBQVksNENBQVcsR0FBckI7QUFBYyxRQUNaLElBQU0sTUFBTSxHQUFHLGlCQUFNLFdBQVcsV0FBRSxDQUFDO0FBQ3ZDLFFBQ0ksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLE1BQU0sRUFBRTtBQUNsRSxZQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDN0MsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtBQUNyQyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzdFLFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtBQUN2QyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDakYsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtBQUNuQyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzlELFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7QUFDckMsWUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUNsRSxTQUFLO0FBQ0wsUUFDSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDRixJQXRFVTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFDLCtEQUF5QztBQUVwRCxJQU1XO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMsa0VBQWlDO0FBRTVDLElBTVc7QUFBYSxRQUFyQixLQUFLLEVBQUU7QUFBQyxvRUFBbUM7QUFFOUMsSUFNVztBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFDLGdFQUFzQjtBQUVqQyxJQU1XO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMsa0VBQXdCO0lBeEN0QixzQkFBc0Isd0JBSmxDLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxpQkFBaUIsY0FDM0IsUUFBUSxFQUFFLEVBQUUsVUFDYixDQUFDLFFBQ1c7aUJBQXNCLENBOEVsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCw2QkFBQztBQUNBLENBREEsQUE5RUQsQ0FBNEMsZUFBZSxHQThFMUQ7QUFDRCxTQS9FYSxzQkFBc0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBJY29uUHJvcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5pbXBvcnQgeyBGYUljb25Db21wb25lbnQgfSBmcm9tICcuL2ljb24uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZmEtZHVvdG9uZS1pY29uJyxcbiAgdGVtcGxhdGU6IGBgLFxufSlcbmV4cG9ydCBjbGFzcyBGYUR1b3RvbmVJY29uQ29tcG9uZW50IGV4dGVuZHMgRmFJY29uQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFN3YXAgdGhlIGRlZmF1bHQgb3BhY2l0eSBvZiBlYWNoIGR1b3RvbmUgaWNvbuKAmXMgbGF5ZXJzLiBUaGlzIHdpbGwgbWFrZSBhblxuICAgKiBpY29u4oCZcyBwcmltYXJ5IGxheWVyIGhhdmUgdGhlIGRlZmF1bHQgb3BhY2l0eSBvZiA0MCUgcmF0aGVyIHRoYW4gaXRzXG4gICAqIHNlY29uZGFyeSBsYXllci5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEBJbnB1dCgpIHN3YXBPcGFjaXR5PzogJ3RydWUnIHwgJ2ZhbHNlJyB8IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgb3BhY2l0eSBvZiB0aGUgcHJpbWFyeSBpY29uIGxheWVyLlxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlIGluIHJhbmdlIFswLCAxLjBdLlxuICAgKlxuICAgKiBAZGVmYXVsdCAxLjBcbiAgICovXG4gIEBJbnB1dCgpIHByaW1hcnlPcGFjaXR5Pzogc3RyaW5nIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDdXN0b21pemUgdGhlIG9wYWNpdHkgb2YgdGhlIHNlY29uZGFyeSBpY29uIGxheWVyLlxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlIGluIHJhbmdlIFswLCAxLjBdLlxuICAgKlxuICAgKiBAZGVmYXVsdCAwLjRcbiAgICovXG4gIEBJbnB1dCgpIHNlY29uZGFyeU9wYWNpdHk/OiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgY29sb3Igb2YgdGhlIHByaW1hcnkgaWNvbiBsYXllci5cbiAgICogQWNjZXB0cyBhbnkgdmFsaWQgQ1NTIGNvbG9yIHZhbHVlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBDU1MgaW5oZXJpdGVkIGNvbG9yXG4gICAqL1xuICBASW5wdXQoKSBwcmltYXJ5Q29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgY29sb3Igb2YgdGhlIHNlY29uZGFyeSBpY29uIGxheWVyLlxuICAgKiBBY2NlcHRzIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAqXG4gICAqIEBkZWZhdWx0IENTUyBpbmhlcml0ZWQgY29sb3JcbiAgICovXG4gIEBJbnB1dCgpIHNlY29uZGFyeUNvbG9yPzogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBmaW5kSWNvbkRlZmluaXRpb24oaTogSWNvblByb3AgfCBJY29uRGVmaW5pdGlvbik6IEljb25EZWZpbml0aW9uIHwgbnVsbCB7XG4gICAgY29uc3QgbG9va3VwID0gc3VwZXIuZmluZEljb25EZWZpbml0aW9uKGkpO1xuXG4gICAgaWYgKGxvb2t1cCAhPSBudWxsICYmIGxvb2t1cC5wcmVmaXggIT09ICdmYWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgc3BlY2lmaWVkIGljb24gZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgRHVvdG9uZSBpY29uLiAnICtcbiAgICAgICAgICAnQ2hlY2sgdGhhdCB5b3Ugc3BlY2lmaWVkIHRoZSBjb3JyZWN0IHN0eWxlOiAnICtcbiAgICAgICAgICBgPGZhLWR1b3RvbmUtaWNvbiBbaWNvbl09XCJbJ2ZhYicsICcke2xvb2t1cC5pY29uTmFtZX0nXVwiPjwvZmEtZHVvdG9uZS1pY29uPiBgICtcbiAgICAgICAgICBgb3IgdXNlOiA8ZmEtaWNvbiBpY29uPVwiJHtsb29rdXAuaWNvbk5hbWV9XCI+PC9mYS1pY29uPiBpbnN0ZWFkLmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBsb29rdXA7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnVpbGRQYXJhbXMoKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3VwZXIuYnVpbGRQYXJhbXMoKTtcblxuICAgIGlmICh0aGlzLnN3YXBPcGFjaXR5ID09PSB0cnVlIHx8IHRoaXMuc3dhcE9wYWNpdHkgPT09ICd0cnVlJykge1xuICAgICAgcGFyYW1zLmNsYXNzZXMucHVzaCgnZmEtc3dhcC1vcGFjaXR5Jyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByaW1hcnlPcGFjaXR5ICE9IG51bGwpIHtcbiAgICAgIHBhcmFtcy5zdHlsZXNbJy0tZmEtcHJpbWFyeS1vcGFjaXR5J10gPSB0aGlzLnByaW1hcnlPcGFjaXR5LnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNlY29uZGFyeU9wYWNpdHkgIT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnN0eWxlc1snLS1mYS1zZWNvbmRhcnktb3BhY2l0eSddID0gdGhpcy5zZWNvbmRhcnlPcGFjaXR5LnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByaW1hcnlDb2xvciAhPSBudWxsKSB7XG4gICAgICBwYXJhbXMuc3R5bGVzWyctLWZhLXByaW1hcnktY29sb3InXSA9IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWNvbmRhcnlDb2xvciAhPSBudWxsKSB7XG4gICAgICBwYXJhbXMuc3R5bGVzWyctLWZhLXNlY29uZGFyeS1jb2xvciddID0gdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iXX0=