import { __decorate, __param, __read, __spread } from "tslib";
import { Component, HostBinding, Input, Optional } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { findIconDefinition, icon, parse, } from '@fortawesome/fontawesome-svg-core';
import { FaConfig } from '../config';
import { FaIconLibrary } from '../icon-library';
import { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';
import { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';
import { faClassList } from '../shared/utils/classlist.util';
import { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';
import { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
var FaIconComponent = /** @class */ (function () {
    function FaIconComponent(sanitizer, config, iconLibrary, stackItem) {
        this.sanitizer = sanitizer;
        this.config = config;
        this.iconLibrary = iconLibrary;
        this.stackItem = stackItem;
        this.classes = [];
    }
    FaIconComponent.prototype.ngOnChanges = function (changes) {
        if (this.icon == null && this.config.fallbackIcon == null) {
            return faWarnIfIconSpecMissing();
        }
        var iconToBeRendered = null;
        if (this.icon == null) {
            iconToBeRendered = this.config.fallbackIcon;
        }
        else {
            iconToBeRendered = this.icon;
        }
        if (changes) {
            var iconDefinition = this.findIconDefinition(iconToBeRendered);
            if (iconDefinition != null) {
                var params = this.buildParams();
                this.renderIcon(iconDefinition, params);
            }
        }
    };
    /**
     * Programmatically trigger rendering of the icon.
     *
     * This method is useful, when creating {@link FaIconComponent} dynamically or
     * changing its inputs programmatically as in these cases icon won't be
     * re-rendered automatically.
     */
    FaIconComponent.prototype.render = function () {
        this.ngOnChanges({});
    };
    FaIconComponent.prototype.findIconDefinition = function (i) {
        var lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);
        if ('icon' in lookup) {
            return lookup;
        }
        var definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);
        if (definition != null) {
            return definition;
        }
        var globalDefinition = findIconDefinition(lookup);
        if (globalDefinition != null) {
            var message = 'Global icon library is deprecated. ' +
                'Consult https://github.com/FortAwesome/angular-fontawesome/blob/master/UPGRADING.md ' +
                'for the migration instructions.';
            if (this.config.globalLibrary === 'unset') {
                console.error('FontAwesome: ' + message);
            }
            else if (!this.config.globalLibrary) {
                throw new Error(message);
            }
            return globalDefinition;
        }
        faWarnIfIconDefinitionMissing(lookup);
        return null;
    };
    FaIconComponent.prototype.buildParams = function () {
        var classOpts = {
            flip: this.flip,
            spin: this.spin,
            pulse: this.pulse,
            border: this.border,
            inverse: this.inverse,
            size: this.size || null,
            pull: this.pull || null,
            rotate: this.rotate || null,
            fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,
            stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null,
        };
        var parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;
        return {
            title: this.title,
            transform: parsedTransform,
            classes: __spread(faClassList(classOpts), this.classes),
            mask: this.mask != null ? this.findIconDefinition(this.mask) : null,
            styles: this.styles != null ? this.styles : {},
            symbol: this.symbol,
            attributes: {
                role: this.a11yRole,
            },
        };
    };
    FaIconComponent.prototype.renderIcon = function (definition, params) {
        var renderedIcon = icon(definition, params);
        this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\n'));
    };
    FaIconComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: FaConfig },
        { type: FaIconLibrary },
        { type: FaStackItemSizeDirective, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], FaIconComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "spin", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "pulse", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "mask", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "styles", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "flip", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "size", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "pull", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "border", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "inverse", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "symbol", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "rotate", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "fixedWidth", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "classes", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "transform", void 0);
    __decorate([
        Input()
    ], FaIconComponent.prototype, "a11yRole", void 0);
    __decorate([
        HostBinding('innerHTML')
    ], FaIconComponent.prototype, "renderedIconHTML", void 0);
    FaIconComponent = __decorate([ __param(3, Optional())
    ], FaIconComponent);
FaIconComponent.ɵfac = function FaIconComponent_Factory(t) { return new (t || FaIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(FaConfig), ɵngcc0.ɵɵdirectiveInject(FaIconLibrary), ɵngcc0.ɵɵdirectiveInject(FaStackItemSizeDirective, 8)); };
FaIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FaIconComponent, selectors: [["fa-icon"]], hostAttrs: [1, "ng-fa-icon"], hostVars: 2, hostBindings: function FaIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("innerHTML", ctx.renderedIconHTML, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵattribute("title", ctx.title);
    } }, inputs: { classes: "classes", icon: "icon", title: "title", spin: "spin", pulse: "pulse", mask: "mask", styles: "styles", flip: "flip", size: "size", pull: "pull", border: "border", inverse: "inverse", symbol: "symbol", rotate: "rotate", fixedWidth: "fixedWidth", transform: "transform", a11yRole: "a11yRole" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function FaIconComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FaIconComponent, [{
        type: Component,
        args: [{
                selector: 'fa-icon',
                template: "",
                host: {
                    class: 'ng-fa-icon',
                    '[attr.title]': 'title'
                }
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: FaConfig }, { type: FaIconLibrary }, { type: FaStackItemSizeDirective, decorators: [{
                type: Optional
            }] }]; }, { classes: [{
            type: Input
        }], renderedIconHTML: [{
            type: HostBinding,
            args: ['innerHTML']
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], spin: [{
            type: Input
        }], pulse: [{
            type: Input
        }], mask: [{
            type: Input
        }], styles: [{
            type: Input
        }], flip: [{
            type: Input
        }], size: [{
            type: Input
        }], pull: [{
            type: Input
        }], border: [{
            type: Input
        }], inverse: [{
            type: Input
        }], symbol: [{
            type: Input
        }], rotate: [{
            type: Input
        }], fixedWidth: [{
            type: Input
        }], transform: [{
            type: Input
        }], a11yRole: [{
            type: Input
        }] }); })();
    return FaIconComponent;
}());
export { FaIconComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,