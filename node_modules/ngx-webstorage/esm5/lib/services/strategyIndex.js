import { __decorate, __metadata, __param } from "tslib";
import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
import * as i1 from "../strategies/index";
import * as ɵngcc0 from '@angular/core';
export var InvalidStrategyError = 'invalid_strategy';
var StrategyIndex = /** @class */ (function () {
    function StrategyIndex(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map(function (strategy, index, arr) { return strategy.name; })
            .map(function (name, index, arr) { return arr.indexOf(name) === index ? index : null; })
            .filter(function (index) { return index !== null; })
            .map(function (index) { return strategies[index]; });
    }
    StrategyIndex_1 = StrategyIndex;
    StrategyIndex.get = function (name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        var strategy = this.index[name];
        if (!strategy.isAvailable) {
            strategy = this.index[StorageStrategies.InMemory];
        }
        return strategy;
    };
    StrategyIndex.set = function (name, strategy) {
        this.index[name] = strategy;
    };
    StrategyIndex.clear = function (name) {
        if (name !== undefined)
            delete this.index[name];
        else
            this.index = {};
    };
    StrategyIndex.isStrategyRegistered = function (name) {
        return name in this.index;
    };
    StrategyIndex.hasRegistredStrategies = function () {
        return Object.keys(this.index).length > 0;
    };
    StrategyIndex.prototype.getStrategy = function (name) {
        return StrategyIndex_1.get(name);
    };
    StrategyIndex.prototype.indexStrategies = function () {
        var _this = this;
        this.strategies.forEach(function (strategy) { return _this.register(strategy.name, strategy); });
    };
    StrategyIndex.prototype.indexStrategy = function (name, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (StrategyIndex_1.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex_1.get(name);
        var strategy = this.strategies.find(function (strategy) { return strategy.name === name; });
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    };
    StrategyIndex.prototype.register = function (name, strategy, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (!StrategyIndex_1.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex_1.set(name, strategy);
            this.registration$.next(name);
        }
    };
    var StrategyIndex_1;
    StrategyIndex.index = {};
    StrategyIndex.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
    ]; };
    StrategyIndex.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.ɵɵinject(i1.STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
    StrategyIndex = StrategyIndex_1 = __decorate([ __param(0, Optional()), __param(0, Inject(STORAGE_STRATEGIES)),
        __metadata("design:paramtypes", [Array])
    ], StrategyIndex);
StrategyIndex.ɵfac = function StrategyIndex_Factory(t) { return new (t || StrategyIndex)(ɵngcc0.ɵɵinject(STORAGE_STRATEGIES, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StrategyIndex, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [STORAGE_STRATEGIES]
            }] }]; }, null); })();
    return StrategyIndex;
}());
export { StrategyIndex };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZXMiOlsibmc6L25neC13ZWJzdG9yYWdlL2xpYi9zZXJ2aWNlcy9zdHJhdGVneUluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQ7QUFDb0M7O0FBQXBDLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLGtCQUFrQixDQUFDO0FBR3ZEO0FBRW1CLElBR2xCLHVCQUE4RCxVQUFrQztBQUNqRyxRQUQrRCxlQUFVLEdBQVYsVUFBVSxDQUF3QjtBQUFDLFFBRnhGLGtCQUFhLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7QUFDekQsUUFFRSxJQUFJLENBQUMsVUFBVTtBQUFFLFlBQUEsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUNuQyxRQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRTtBQUN4QyxhQUFJLEdBQUcsQ0FBQyxVQUFDLFFBQThCLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSyxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQWIsQ0FBYSxDQUFDO0FBQ3RFLGFBQUksR0FBRyxDQUFDLFVBQUMsSUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQTFDLENBQTBDLENBQUM7QUFDakYsYUFBSSxNQUFNLENBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLEtBQUssSUFBSSxFQUFkLENB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QixFQUFFLGdCQUFpQztBQUNoRyxRQUQrRCxpQ0FBQSxFQUFBLHdCQUFpQztBQUNoRyxRQUFFLElBQUksQ0FBQyxlQUFhLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksZ0JBQWdCLEVBQUU7QUFDckUsWUFBRyxlQUFhLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNyQyxZQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFNBQUc7QUFDSCxJQUFDLENBQUM7QUFFRjtBQUN1QixJQTlEZixtQkFBSyxHQUE2QyxFQUFFLENBQUM7QUFDN0Q7QUFDQSw0Q0FDYyxRQUFRLFlBQUksTUFBTSxTQUFDLGtCQUFrQjtBQUFRO0FBQVU7QUFJMUMsSUFUZCxhQUFhLDBDQUR6QixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUMsM0NBQ3pCLENBS00sV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFBRTtBQUNwRCxPQU5XLGFBQWEsQ0ErRHpCOzs7Ozs7Ozs7O2tDQUNEO0FBQUMsd0JBekVEO0FBQUUsQ0F3RUQsQUEvREQsSUErREM7QUFDRCxTQWhFYSxhQUFhO0FBRTFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NUT1JBR0VfU1RSQVRFR0lFU30gZnJvbSAnLi4vc3RyYXRlZ2llcyc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFN0cmF0ZWd5RXJyb3IgPSAnaW52YWxpZF9zdHJhdGVneSc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5SW5kZXgge1xuXG5cdHN0YXRpYyBpbmRleDogeyBbbmFtZTogc3RyaW5nXTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gfSA9IHt9O1xuXHRyZWFkb25seSByZWdpc3RyYXRpb24kOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xuXG5cdGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoU1RPUkFHRV9TVFJBVEVHSUVTKSBwcm90ZWN0ZWQgc3RyYXRlZ2llczogU3RvcmFnZVN0cmF0ZWd5PGFueT5bXSkge1xuXHRcdGlmICghc3RyYXRlZ2llcykgc3RyYXRlZ2llcyA9IFtdO1xuXHRcdHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXMucmV2ZXJzZSgpXG5cdFx0XHQubWFwKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4sIGluZGV4LCBhcnIpID0+IHN0cmF0ZWd5Lm5hbWUpXG5cdFx0XHQubWFwKChuYW1lOiBzdHJpbmcsIGluZGV4LCBhcnIpID0+IGFyci5pbmRleE9mKG5hbWUpID09PSBpbmRleCA/IGluZGV4IDogbnVsbClcblx0XHRcdC5maWx0ZXIoKGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSBudWxsKVxuXHRcdFx0Lm1hcCgoaW5kZXg6IG51bWJlcikgPT4gc3RyYXRlZ2llc1tpbmRleF0pO1xuXHR9XG5cblx0c3RhdGljIGdldChuYW1lOiBzdHJpbmcpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKCF0aGlzLmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpKSB0aHJvdyBFcnJvcihJbnZhbGlkU3RyYXRlZ3lFcnJvcik7XG5cdFx0bGV0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IHRoaXMuaW5kZXhbbmFtZV07XG5cdFx0aWYgKCFzdHJhdGVneS5pc0F2YWlsYWJsZSkge1xuXHRcdFx0c3RyYXRlZ3kgPSB0aGlzLmluZGV4W1N0b3JhZ2VTdHJhdGVnaWVzLkluTWVtb3J5XTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5KTogdm9pZCB7XG5cdFx0dGhpcy5pbmRleFtuYW1lXSA9IHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIGNsZWFyKG5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSBkZWxldGUgdGhpcy5pbmRleFtuYW1lXTtcblx0XHRlbHNlIHRoaXMuaW5kZXggPSB7fTtcblx0fVxuXG5cdHN0YXRpYyBpc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gbmFtZSBpbiB0aGlzLmluZGV4O1xuXHR9XG5cblx0c3RhdGljIGhhc1JlZ2lzdHJlZFN0cmF0ZWdpZXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaW5kZXgpLmxlbmd0aCA+IDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0U3RyYXRlZ3kobmFtZTogc3RyaW5nKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xuXHRcdHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0fVxuXG5cdHB1YmxpYyBpbmRleFN0cmF0ZWdpZXMoKSB7XG5cdFx0dGhpcy5zdHJhdGVnaWVzLmZvckVhY2goKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PikgPT4gdGhpcy5yZWdpc3RlcihzdHJhdGVneS5uYW1lLCBzdHJhdGVneSkpO1xuXHR9XG5cblx0cHVibGljIGluZGV4U3RyYXRlZ3kobmFtZTogc3RyaW5nLCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKFN0cmF0ZWd5SW5kZXguaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkgJiYgIW92ZXJyaWRlSWZFeGlzdHMpIHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0XHRjb25zdCBzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gPSB0aGlzLnN0cmF0ZWdpZXMuZmluZCgoc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSA9PiBzdHJhdGVneS5uYW1lID09PSBuYW1lKTtcblx0XHRpZiAoIXN0cmF0ZWd5KSB0aHJvdyBuZXcgRXJyb3IoSW52YWxpZFN0cmF0ZWd5RXJyb3IpO1xuXHRcdHRoaXMucmVnaXN0ZXIobmFtZSwgc3RyYXRlZ3ksIG92ZXJyaWRlSWZFeGlzdHMpO1xuXHRcdHJldHVybiBzdHJhdGVneTtcblx0fVxuXG5cdHB1YmxpYyByZWdpc3RlcihuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55Piwgb3ZlcnJpZGVJZkV4aXN0czogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0aWYgKCFTdHJhdGVneUluZGV4LmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpIHx8IG92ZXJyaWRlSWZFeGlzdHMpIHtcblx0XHRcdFN0cmF0ZWd5SW5kZXguc2V0KG5hbWUsIHN0cmF0ZWd5KTtcblx0XHRcdHRoaXMucmVnaXN0cmF0aW9uJC5uZXh0KG5hbWUpO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=