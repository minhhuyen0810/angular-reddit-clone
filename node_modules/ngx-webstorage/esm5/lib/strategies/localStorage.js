import { __decorate, __extends, __metadata, __param } from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { LOCAL_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var LocalStorageStrategy = /** @class */ (function (_super) {
    __extends(LocalStorageStrategy, _super);
    function LocalStorageStrategy(storage, cache, platformId, zone) {
        var _this = _super.call(this, storage, cache) || this;
        _this.storage = storage;
        _this.cache = cache;
        _this.platformId = platformId;
        _this.zone = zone;
        _this.name = LocalStorageStrategy_1.strategyName;
        if (isPlatformBrowser(_this.platformId))
            _this.listenExternalChanges();
        return _this;
    }
    LocalStorageStrategy_1 = LocalStorageStrategy;
    LocalStorageStrategy.prototype.listenExternalChanges = function () {
        var _this = this;
        window.addEventListener('storage', function (event) { return _this.zone.run(function () {
            if (event.storageArea !== _this.storage)
                return;
            var key = event.key;
            if (key !== null)
                _this.cache.del(_this.name, event.key);
            else
                _this.cache.clear(_this.name);
            _this.keyChanges.next(key);
        }); });
    };
    var LocalStorageStrategy_1;
    LocalStorageStrategy.strategyName = StorageStrategies.Local;
    LocalStorageStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
        { type: StrategyCacheService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone }
    ]; };
    LocalStorageStrategy = LocalStorageStrategy_1 = __decorate([ __param(0, Inject(LOCAL_STORAGE)),
        __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object, StrategyCacheService, Object, NgZone])
    ], LocalStorageStrategy);
LocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) { return new (t || LocalStorageStrategy)(ɵngcc0.ɵɵinject(LOCAL_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
LocalStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalStorageStrategy, factory: function (t) { return LocalStorageStrategy.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalStorageStrategy, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCAL_STORAGE]
            }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
    return LocalStorageStrategy;
}(BaseSyncStorageStrategy));
export { LocalStorageStrategy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLmpzIiwic291cmNlcyI6WyJuZzovbmd4LXdlYnN0b3JhZ2UvbGliL3N0cmF0ZWdpZXMvbG9jYWxTdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7QUFJbEQ7QUFBOEQsSUFBcEIsd0NBQXVCO0FBQUMsSUFJakUsOEJBQTZDLE9BQW1CLEVBQzFDLEtBQTJCLEVBQ04sVUFBZSxFQUNwQyxJQUFZO0FBQ25DLFFBSkMsWUFJQyxrQkFBTSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBRXJCO0FBQ0YsUUFQOEMsYUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBQzNDLFdBQUssR0FBTCxLQUFLLENBQXNCO0FBQUMsUUFDUCxnQkFBVSxHQUFWLFVBQVUsQ0FBSztBQUFDLFFBQ3JDLFVBQUksR0FBSixJQUFJLENBQVE7QUFBQyxRQUwxQixVQUFJLEdBQVcsc0JBQW9CLENBQUMsWUFBWSxDQUFDO0FBQzNELFFBTUUsSUFBSSxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDO0FBQUUsWUFBQSxLQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN2RTtBQUVrQixJQUZqQixDQUFDO0FBQ0YsNkJBWGEsb0JBQW9CO0FBQUUsSUFZeEIsb0RBQXFCLEdBQS9CO0FBQWMsUUFBZCxpQkFRQztBQUNGLFFBUkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFDLEtBQW1CLElBQUssT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUN0RSxZQUFILElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxLQUFJLENBQUMsT0FBTztBQUFFLGdCQUFBLE9BQU87QUFDbEQsWUFBRyxJQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2pDLFlBQUcsSUFBSSxHQUFHLEtBQUssSUFBSTtBQUFFLGdCQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFEO0FBQWlCLGdCQUFULEtBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxZQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLFFBQUUsQ0FBQyxDQUFDLEVBTjBELENBTTFELENBQUMsQ0FBQztBQUNOLElBQUMsQ0FBQztBQUVGO0FBQzhCLElBdEJiLGlDQUFZLEdBQVcsaUJBQWlCLENBQUMsS0FBSyxDQUFDO0FBQ2hFO0FBRUksZ0RBQVUsTUFBTSxTQUFDLGFBQWE7QUFBUyxnQkFDYixvQkFBb0I7QUFDaEQsZ0RBQVksTUFBTSxTQUFDLFdBQVc7QUFBUyxnQkFDWixNQUFNO0FBQUc7QUFDN0IsSUFSSSxvQkFBb0IsaURBRGhDLFVBQVUsRUFBRSxyQkFDTCxDQUlNLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQUUsUUFFdkIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFBRSxpREFETCxvQkFBb0IsVUFFckIsTUFBTTtBQUFHLE9BUHpCLG9CQUFvQixDQXNCaEM7Ozs7Ozs7Ozs7OzJEQUNEO0FBQUMsSUFERCwyQkFBQztBQUNBLENBREEsQUF0QkQsQ0FBMEMsdUJBQXVCLEdBc0JoRTtBQUNELFNBdkJhLG9CQUFvQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHJhdGVneUNhY2hlU2VydmljZX0gZnJvbSAnLi4vY29yZS9zdHJhdGVneUNhY2hlJztcbmltcG9ydCB7QmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4vYmFzZVN5bmNTdG9yYWdlJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TE9DQUxfU1RPUkFHRX0gZnJvbSAnLi4vY29yZS9uYXRpdmVTdG9yYWdlJztcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtXZWJTdG9yYWdlfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvd2ViU3RvcmFnZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VTdHJhdGVneSBleHRlbmRzIEJhc2VTeW5jU3RvcmFnZVN0cmF0ZWd5IHtcblx0c3RhdGljIHJlYWRvbmx5IHN0cmF0ZWd5TmFtZTogc3RyaW5nID0gU3RvcmFnZVN0cmF0ZWdpZXMuTG9jYWw7XG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IExvY2FsU3RvcmFnZVN0cmF0ZWd5LnN0cmF0ZWd5TmFtZTtcblxuXHRjb25zdHJ1Y3RvcihASW5qZWN0KExPQ0FMX1NUT1JBR0UpIHByb3RlY3RlZCBzdG9yYWdlOiBXZWJTdG9yYWdlLFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlLFxuXHQgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55LFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lKSB7XG5cdFx0c3VwZXIoc3RvcmFnZSwgY2FjaGUpO1xuXHRcdGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB0aGlzLmxpc3RlbkV4dGVybmFsQ2hhbmdlcygpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGxpc3RlbkV4dGVybmFsQ2hhbmdlcygpIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIChldmVudDogU3RvcmFnZUV2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHtcblx0XHRcdGlmIChldmVudC5zdG9yYWdlQXJlYSAhPT0gdGhpcy5zdG9yYWdlKSByZXR1cm47XG5cdFx0XHRjb25zdCBrZXk6IHN0cmluZyA9IGV2ZW50LmtleTtcblx0XHRcdGlmIChrZXkgIT09IG51bGwpIHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwgZXZlbnQua2V5KTtcblx0XHRcdGVsc2UgdGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xuXHRcdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcblx0XHR9KSk7XG5cdH1cblxufVxuIl19