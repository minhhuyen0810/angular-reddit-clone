import { __decorate, __extends, __metadata, __param } from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { SESSION_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var SessionStorageStrategy = /** @class */ (function (_super) {
    __extends(SessionStorageStrategy, _super);
    function SessionStorageStrategy(storage, cache, platformId, zone) {
        var _this = _super.call(this, storage, cache) || this;
        _this.storage = storage;
        _this.cache = cache;
        _this.platformId = platformId;
        _this.zone = zone;
        _this.name = SessionStorageStrategy_1.strategyName;
        if (isPlatformBrowser(_this.platformId))
            _this.listenExternalChanges();
        return _this;
    }
    SessionStorageStrategy_1 = SessionStorageStrategy;
    SessionStorageStrategy.prototype.listenExternalChanges = function () {
        var _this = this;
        window.addEventListener('storage', function (event) { return _this.zone.run(function () {
            if (event.storageArea !== _this.storage)
                return;
            var key = event.key;
            if (event.key !== null)
                _this.cache.del(_this.name, event.key);
            else
                _this.cache.clear(_this.name);
            _this.keyChanges.next(key);
        }); });
    };
    var SessionStorageStrategy_1;
    SessionStorageStrategy.strategyName = StorageStrategies.Session;
    SessionStorageStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },
        { type: StrategyCacheService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone }
    ]; };
    SessionStorageStrategy = SessionStorageStrategy_1 = __decorate([ __param(0, Inject(SESSION_STORAGE)),
        __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object, StrategyCacheService, Object, NgZone])
    ], SessionStorageStrategy);
SessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) { return new (t || SessionStorageStrategy)(ɵngcc0.ɵɵinject(SESSION_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
SessionStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SessionStorageStrategy, factory: function (t) { return SessionStorageStrategy.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SessionStorageStrategy, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [SESSION_STORAGE]
            }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
    return SessionStorageStrategy;
}(BaseSyncStorageStrategy));
export { SessionStorageStrategy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvblN0b3JhZ2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtd2Vic3RvcmFnZS9saWIvc3RyYXRlZ2llcy9zZXNzaW9uU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBSWxEO0FBQWdFLElBQXBCLDBDQUF1QjtBQUFDLElBSW5FLGdDQUErQyxPQUFtQixFQUM1QyxLQUEyQixFQUNOLFVBQWUsRUFDcEMsSUFBWTtBQUNuQyxRQUpDLFlBSUMsa0JBQU0sT0FBTyxFQUFFLEtBQUssQ0FBQyxTQUVyQjtBQUNGLFFBUGdELGFBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQUM3QyxXQUFLLEdBQUwsS0FBSyxDQUFzQjtBQUFDLFFBQ1AsZ0JBQVUsR0FBVixVQUFVLENBQUs7QUFBQyxRQUNyQyxVQUFJLEdBQUosSUFBSSxDQUFRO0FBQUMsUUFMMUIsVUFBSSxHQUFXLHdCQUFzQixDQUFDLFlBQVksQ0FBQztBQUM3RCxRQU1FLElBQUksaUJBQWlCLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQztBQUFFLFlBQUEsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDdkU7QUFFa0IsSUFGakIsQ0FBQztBQUNGLCtCQVhhLHNCQUFzQjtBQUFFLElBWTFCLHNEQUFxQixHQUEvQjtBQUFjLFFBQWQsaUJBUUM7QUFDRixRQVJFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBQyxLQUFtQixJQUFLLE9BQUEsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDdEUsWUFBSCxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssS0FBSSxDQUFDLE9BQU87QUFBRSxnQkFBQSxPQUFPO0FBQ2xELFlBQUcsSUFBTSxHQUFHLEdBQVcsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNqQyxZQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxJQUFJO0FBQUUsZ0JBQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEU7QUFBaUIsZ0JBQVQsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDLFlBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsUUFBRSxDQUFDLENBQUMsRUFOMEQsQ0FNMUQsQ0FBQyxDQUFDO0FBQ04sSUFBQyxDQUFDO0FBRUY7QUFDZ0MsSUF0QmYsbUNBQVksR0FBVyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDbEU7QUFFSSxnREFBVSxNQUFNLFNBQUMsZUFBZTtBQUFTLGdCQUNmLG9CQUFvQjtBQUNoRCxnREFBWSxNQUFNLFNBQUMsV0FBVztBQUFTLGdCQUNaLE1BQU07QUFBRztBQUM3QixJQVJJLHNCQUFzQixtREFEbEMsVUFBVSxFQUFFLHJCQUNMLENBSU0sV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7QUFBRSxRQUV6QixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUFFLGlEQURMLG9CQUFvQixVQUVyQixNQUFNO0FBQUcsT0FQekIsc0JBQXNCLENBc0JsQzs7Ozs7Ozs7Ozs7MkRBQ0Q7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQXRCRCxDQUE0Qyx1QkFBdUIsR0FzQmxFO0FBQ0QsU0F2QmEsc0JBQXNCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0cmF0ZWd5Q2FjaGVTZXJ2aWNlfSBmcm9tICcuLi9jb3JlL3N0cmF0ZWd5Q2FjaGUnO1xuaW1wb3J0IHtCYXNlU3luY1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi9iYXNlU3luY1N0b3JhZ2UnO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0V9IGZyb20gJy4uL2NvcmUvbmF0aXZlU3RvcmFnZSc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7V2ViU3RvcmFnZX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3dlYlN0b3JhZ2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSBleHRlbmRzIEJhc2VTeW5jU3RvcmFnZVN0cmF0ZWd5IHtcblx0c3RhdGljIHJlYWRvbmx5IHN0cmF0ZWd5TmFtZTogc3RyaW5nID0gU3RvcmFnZVN0cmF0ZWdpZXMuU2Vzc2lvbjtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nID0gU2Vzc2lvblN0b3JhZ2VTdHJhdGVneS5zdHJhdGVneU5hbWU7XG5cblx0Y29uc3RydWN0b3IoQEluamVjdChTRVNTSU9OX1NUT1JBR0UpIHByb3RlY3RlZCBzdG9yYWdlOiBXZWJTdG9yYWdlLFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlLFxuXHQgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55LFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lKSB7XG5cdFx0c3VwZXIoc3RvcmFnZSwgY2FjaGUpO1xuXHRcdGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB0aGlzLmxpc3RlbkV4dGVybmFsQ2hhbmdlcygpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGxpc3RlbkV4dGVybmFsQ2hhbmdlcygpIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIChldmVudDogU3RvcmFnZUV2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHtcblx0XHRcdGlmIChldmVudC5zdG9yYWdlQXJlYSAhPT0gdGhpcy5zdG9yYWdlKSByZXR1cm47XG5cdFx0XHRjb25zdCBrZXk6IHN0cmluZyA9IGV2ZW50LmtleTtcblx0XHRcdGlmIChldmVudC5rZXkgIT09IG51bGwpIHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwgZXZlbnQua2V5KTtcblx0XHRcdGVsc2UgdGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xuXHRcdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcblx0XHR9KSk7XG5cdH1cblxufVxuIl19