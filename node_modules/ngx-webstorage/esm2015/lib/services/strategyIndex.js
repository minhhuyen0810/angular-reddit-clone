import * as ɵngcc0 from '@angular/core';
var StrategyIndex_1;
import { __decorate, __metadata, __param } from "tslib";
import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
import * as i1 from "../strategies/index";
export const InvalidStrategyError = 'invalid_strategy';
let StrategyIndex = StrategyIndex_1 = class StrategyIndex {
    constructor(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map((strategy, index, arr) => strategy.name)
            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)
            .filter((index) => index !== null)
            .map((index) => strategies[index]);
    }
    static get(name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        let strategy = this.index[name];
        if (!strategy.isAvailable) {
            strategy = this.index[StorageStrategies.InMemory];
        }
        return strategy;
    }
    static set(name, strategy) {
        this.index[name] = strategy;
    }
    static clear(name) {
        if (name !== undefined)
            delete this.index[name];
        else
            this.index = {};
    }
    static isStrategyRegistered(name) {
        return name in this.index;
    }
    static hasRegistredStrategies() {
        return Object.keys(this.index).length > 0;
    }
    getStrategy(name) {
        return StrategyIndex_1.get(name);
    }
    indexStrategies() {
        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));
    }
    indexStrategy(name, overrideIfExists = false) {
        if (StrategyIndex_1.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex_1.get(name);
        const strategy = this.strategies.find((strategy) => strategy.name === name);
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    }
    register(name, strategy, overrideIfExists = false) {
        if (!StrategyIndex_1.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex_1.set(name, strategy);
            this.registration$.next(name);
        }
    }
};
StrategyIndex.ɵfac = function StrategyIndex_Factory(t) { return new (t || StrategyIndex)(ɵngcc0.ɵɵinject(STORAGE_STRATEGIES, 8)); };
StrategyIndex.index = {};
StrategyIndex.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
];
StrategyIndex.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.ɵɵinject(i1.STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
StrategyIndex = StrategyIndex_1 = __decorate([ __param(0, Optional()), __param(0, Inject(STORAGE_STRATEGIES)),
    __metadata("design:paramtypes", [Array])
], StrategyIndex);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StrategyIndex, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [STORAGE_STRATEGIES]
            }] }]; }, null); })();
export { StrategyIndex };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZXMiOlsibmc6L25neC13ZWJzdG9yYWdlL2xpYi9zZXJ2aWNlcy9zdHJhdGVneUluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RDtBQUNvQztBQUFwQyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxrQkFBa0IsQ0FBQztBQUd2RCxJQUFhLGFBQWEscUJBQTFCLE1BQWEsYUFBYTtBQUMxQixJQUlDLFlBQThELFVBQWtDO0FBQ2pHLFFBRCtELGVBQVUsR0FBVixVQUFVLENBQXdCO0FBQUMsUUFGeEYsa0JBQWEsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUN6RCxRQUVFLElBQUksQ0FBQyxVQUFVO0FBQUUsWUFBQSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ25DLFFBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQ3hDLGFBQUksR0FBRyxDQUFDLENBQUMsUUFBOEIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3RFLGFBQUksR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNqRixhQUFJLE1BQU0sQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsS0FB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QkFBZ0IsRUFBRTtBQUNyRSxZQUFHLGVBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLFlBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsU0FBRztBQUNILElBQUMsQ0FBQztBQUNGLENBQ0M7b0lBQUE7QUE3RE8sbUJBQUssR0FBNkMsRUFBRSxDQUFDO0FBQzdEO0FBQXVDLHdDQUV6QixRQUFRLFlBQUksTUFBTSxTQUFDLGtCQUFrQjtBQUFRO0FBQUc7QUFMakQsYUFBYSxzQ0FEekIsVUFBVSxDQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyxDQUFDLHZDQUM3QixDQUtVLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQUU7QUFBNkMsR0FMdEYsYUFBYSxDQStEekI7Ozs7Ozs7OztrQ0FDRDtBQUFDLFNBaEVZLGFBQWE7QUFFMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U1RPUkFHRV9TVFJBVEVHSUVTfSBmcm9tICcuLi9zdHJhdGVnaWVzJztcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XG5cbmV4cG9ydCBjb25zdCBJbnZhbGlkU3RyYXRlZ3lFcnJvciA9ICdpbnZhbGlkX3N0cmF0ZWd5JztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgU3RyYXRlZ3lJbmRleCB7XG5cblx0c3RhdGljIGluZGV4OiB7IFtuYW1lOiBzdHJpbmddOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB9ID0ge307XG5cdHJlYWRvbmx5IHJlZ2lzdHJhdGlvbiQ6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG5cblx0Y29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChTVE9SQUdFX1NUUkFURUdJRVMpIHByb3RlY3RlZCBzdHJhdGVnaWVzOiBTdG9yYWdlU3RyYXRlZ3k8YW55PltdKSB7XG5cdFx0aWYgKCFzdHJhdGVnaWVzKSBzdHJhdGVnaWVzID0gW107XG5cdFx0dGhpcy5zdHJhdGVnaWVzID0gc3RyYXRlZ2llcy5yZXZlcnNlKClcblx0XHRcdC5tYXAoKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiwgaW5kZXgsIGFycikgPT4gc3RyYXRlZ3kubmFtZSlcblx0XHRcdC5tYXAoKG5hbWU6IHN0cmluZywgaW5kZXgsIGFycikgPT4gYXJyLmluZGV4T2YobmFtZSkgPT09IGluZGV4ID8gaW5kZXggOiBudWxsKVxuXHRcdFx0LmZpbHRlcigoaW5kZXg6IG51bWJlcikgPT4gaW5kZXggIT09IG51bGwpXG5cdFx0XHQubWFwKChpbmRleDogbnVtYmVyKSA9PiBzdHJhdGVnaWVzW2luZGV4XSk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyk6IFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcblx0XHRpZiAoIXRoaXMuaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkpIHRocm93IEVycm9yKEludmFsaWRTdHJhdGVneUVycm9yKTtcblx0XHRsZXQgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+ID0gdGhpcy5pbmRleFtuYW1lXTtcblx0XHRpZiAoIXN0cmF0ZWd5LmlzQXZhaWxhYmxlKSB7XG5cdFx0XHRzdHJhdGVneSA9IHRoaXMuaW5kZXhbU3RvcmFnZVN0cmF0ZWdpZXMuSW5NZW1vcnldO1xuXHRcdH1cblx0XHRyZXR1cm4gc3RyYXRlZ3k7XG5cdH1cblxuXHRzdGF0aWMgc2V0KG5hbWU6IHN0cmluZywgc3RyYXRlZ3kpOiB2b2lkIHtcblx0XHR0aGlzLmluZGV4W25hbWVdID0gc3RyYXRlZ3k7XG5cdH1cblxuXHRzdGF0aWMgY2xlYXIobmFtZT86IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmIChuYW1lICE9PSB1bmRlZmluZWQpIGRlbGV0ZSB0aGlzLmluZGV4W25hbWVdO1xuXHRcdGVsc2UgdGhpcy5pbmRleCA9IHt9O1xuXHR9XG5cblx0c3RhdGljIGlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBuYW1lIGluIHRoaXMuaW5kZXg7XG5cdH1cblxuXHRzdGF0aWMgaGFzUmVnaXN0cmVkU3RyYXRlZ2llcygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXModGhpcy5pbmRleCkubGVuZ3RoID4gMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRTdHJhdGVneShuYW1lOiBzdHJpbmcpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0cmV0dXJuIFN0cmF0ZWd5SW5kZXguZ2V0KG5hbWUpO1xuXHR9XG5cblx0cHVibGljIGluZGV4U3RyYXRlZ2llcygpIHtcblx0XHR0aGlzLnN0cmF0ZWdpZXMuZm9yRWFjaCgoc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSA9PiB0aGlzLnJlZ2lzdGVyKHN0cmF0ZWd5Lm5hbWUsIHN0cmF0ZWd5KSk7XG5cdH1cblxuXHRwdWJsaWMgaW5kZXhTdHJhdGVneShuYW1lOiBzdHJpbmcsIG92ZXJyaWRlSWZFeGlzdHM6IGJvb2xlYW4gPSBmYWxzZSk6IFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcblx0XHRpZiAoU3RyYXRlZ3lJbmRleC5pc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lKSAmJiAhb3ZlcnJpZGVJZkV4aXN0cykgcmV0dXJuIFN0cmF0ZWd5SW5kZXguZ2V0KG5hbWUpO1xuXHRcdGNvbnN0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IHRoaXMuc3RyYXRlZ2llcy5maW5kKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4pID0+IHN0cmF0ZWd5Lm5hbWUgPT09IG5hbWUpO1xuXHRcdGlmICghc3RyYXRlZ3kpIHRocm93IG5ldyBFcnJvcihJbnZhbGlkU3RyYXRlZ3lFcnJvcik7XG5cdFx0dGhpcy5yZWdpc3RlcihuYW1lLCBzdHJhdGVneSwgb3ZlcnJpZGVJZkV4aXN0cyk7XG5cdFx0cmV0dXJuIHN0cmF0ZWd5O1xuXHR9XG5cblx0cHVibGljIHJlZ2lzdGVyKG5hbWU6IHN0cmluZywgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+LCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHRpZiAoIVN0cmF0ZWd5SW5kZXguaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkgfHwgb3ZlcnJpZGVJZkV4aXN0cykge1xuXHRcdFx0U3RyYXRlZ3lJbmRleC5zZXQobmFtZSwgc3RyYXRlZ3kpO1xuXHRcdFx0dGhpcy5yZWdpc3RyYXRpb24kLm5leHQobmFtZSk7XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==