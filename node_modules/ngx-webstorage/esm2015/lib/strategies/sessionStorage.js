import * as ɵngcc0 from '@angular/core';
var SessionStorageStrategy_1;
import { __decorate, __metadata, __param } from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { SESSION_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
let SessionStorageStrategy = SessionStorageStrategy_1 = class SessionStorageStrategy extends BaseSyncStorageStrategy {
    constructor(storage, cache, platformId, zone) {
        super(storage, cache);
        this.storage = storage;
        this.cache = cache;
        this.platformId = platformId;
        this.zone = zone;
        this.name = SessionStorageStrategy_1.strategyName;
        if (isPlatformBrowser(this.platformId))
            this.listenExternalChanges();
    }
    listenExternalChanges() {
        window.addEventListener('storage', (event) => this.zone.run(() => {
            if (event.storageArea !== this.storage)
                return;
            const key = event.key;
            if (event.key !== null)
                this.cache.del(this.name, event.key);
            else
                this.cache.clear(this.name);
            this.keyChanges.next(key);
        }));
    }
};
SessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) { return new (t || SessionStorageStrategy)(ɵngcc0.ɵɵinject(SESSION_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
SessionStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SessionStorageStrategy, factory: SessionStorageStrategy.ɵfac });
SessionStorageStrategy.strategyName = StorageStrategies.Session;
SessionStorageStrategy.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },
    { type: StrategyCacheService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];
SessionStorageStrategy = SessionStorageStrategy_1 = __decorate([ __param(0, Inject(SESSION_STORAGE)),
    __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object, StrategyCacheService, Object, NgZone])
], SessionStorageStrategy);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SessionStorageStrategy, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [SESSION_STORAGE]
            }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
export { SessionStorageStrategy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvblN0b3JhZ2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtd2Vic3RvcmFnZS9saWIvc3RyYXRlZ2llcy9zZXNzaW9uU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUlsRCxJQUFhLHNCQUFzQiw4QkFBbkMsTUFBYSxzQkFBdUIsU0FBUSx1QkFBdUI7QUFDbkUsSUFHQyxZQUErQyxPQUFtQixFQUM1QyxLQUEyQixFQUNOLFVBQWUsRUFDcEMsSUFBWTtBQUNuQyxRQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEIsUUFMZ0QsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBQzdDLFVBQUssR0FBTCxLQUFLLENBQXNCO0FBQUMsUUFDUCxlQUFVLEdBQVYsVUFBVSxDQUFLO0FBQUMsUUFDckMsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUFDLFFBTDFCLFNBQUksR0FBVyx3QkFBc0IsQ0FBQyxZQUFZLENBQUM7QUFDN0QsUUFNRSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7QUFBRSxZQUFBLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3ZFLElBQUMsQ0FBQztBQUNGLElBQ1cscUJBQXFCO0FBQ2hDLFFBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUNqRixZQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsT0FBTztBQUFFLGdCQUFBLE9BQU87QUFDbEQsWUFBRyxNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2pDLFlBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUk7QUFBRSxnQkFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRTtBQUFpQixnQkFBVCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsWUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDTixJQUFDLENBQUM7QUFDRixDQUNDOztrSUFBQTtBQXJCZ0IsbUNBQVksR0FBVyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDbEU7QUFBZ0QsNENBRWxDLE1BQU0sU0FBQyxlQUFlO0FBQVMsWUFDZixvQkFBb0I7QUFDaEQsNENBQVksTUFBTSxTQUFDLFdBQVc7QUFBUyxZQUNaLE1BQU07QUFBRztBQVB6QixzQkFBc0IsK0NBRGxDLFVBQVUsRUFBRSxqQkFDVCxDQUlVLFdBQUEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQUUsSUFFekIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFBRSw2Q0FETCxvQkFBb0IsVUFFckIsTUFBTTtBQUFHLEdBUHpCLHNCQUFzQixDQXNCbEM7Ozs7Ozs7OzsyREFDRDtBQUFDLFNBdkJZLHNCQUFzQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHJhdGVneUNhY2hlU2VydmljZX0gZnJvbSAnLi4vY29yZS9zdHJhdGVneUNhY2hlJztcbmltcG9ydCB7QmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4vYmFzZVN5bmNTdG9yYWdlJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U0VTU0lPTl9TVE9SQUdFfSBmcm9tICcuLi9jb3JlL25hdGl2ZVN0b3JhZ2UnO1xuaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ2llc30gZnJvbSAnLi4vY29uc3RhbnRzL3N0cmF0ZWd5JztcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1dlYlN0b3JhZ2V9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy93ZWJTdG9yYWdlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlc3Npb25TdG9yYWdlU3RyYXRlZ3kgZXh0ZW5kcyBCYXNlU3luY1N0b3JhZ2VTdHJhdGVneSB7XG5cdHN0YXRpYyByZWFkb25seSBzdHJhdGVneU5hbWU6IHN0cmluZyA9IFN0b3JhZ2VTdHJhdGVnaWVzLlNlc3Npb247XG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IFNlc3Npb25TdG9yYWdlU3RyYXRlZ3kuc3RyYXRlZ3lOYW1lO1xuXG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoU0VTU0lPTl9TVE9SQUdFKSBwcm90ZWN0ZWQgc3RvcmFnZTogV2ViU3RvcmFnZSxcblx0ICAgICAgICAgICAgcHJvdGVjdGVkIGNhY2hlOiBTdHJhdGVneUNhY2hlU2VydmljZSxcblx0ICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IGFueSxcblx0ICAgICAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSkge1xuXHRcdHN1cGVyKHN0b3JhZ2UsIGNhY2hlKTtcblx0XHRpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkgdGhpcy5saXN0ZW5FeHRlcm5hbENoYW5nZXMoKTtcblx0fVxuXG5cdHByb3RlY3RlZCBsaXN0ZW5FeHRlcm5hbENoYW5nZXMoKSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCAoZXZlbnQ6IFN0b3JhZ2VFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiB7XG5cdFx0XHRpZiAoZXZlbnQuc3RvcmFnZUFyZWEgIT09IHRoaXMuc3RvcmFnZSkgcmV0dXJuO1xuXHRcdFx0Y29uc3Qga2V5OiBzdHJpbmcgPSBldmVudC5rZXk7XG5cdFx0XHRpZiAoZXZlbnQua2V5ICE9PSBudWxsKSB0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGV2ZW50LmtleSk7XG5cdFx0XHRlbHNlIHRoaXMuY2FjaGUuY2xlYXIodGhpcy5uYW1lKTtcblx0XHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XG5cdFx0fSkpO1xuXHR9XG5cbn1cbiJdfQ==