import * as ɵngcc0 from '@angular/core';
var InMemoryStorageStrategy_1;
import { __decorate, __metadata, __param } from "tslib";
import { of, Subject } from 'rxjs';
import { StrategyCacheService } from '../core/strategyCache';
import { StorageStrategies } from '../constants/strategy';
import { Inject, Injectable } from '@angular/core';
let InMemoryStorageStrategy = InMemoryStorageStrategy_1 = class InMemoryStorageStrategy {
    constructor(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy_1.strategyName;
    }
    get(key) {
        return of(this.cache.get(this.name, key));
    }
    set(key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    del(key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    clear() {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
};
InMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) { return new (t || InMemoryStorageStrategy)(ɵngcc0.ɵɵinject(StrategyCacheService)); };
InMemoryStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InMemoryStorageStrategy, factory: InMemoryStorageStrategy.ɵfac });
InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
InMemoryStorageStrategy.ctorParameters = () => [
    { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
];
InMemoryStorageStrategy = InMemoryStorageStrategy_1 = __decorate([ __param(0, Inject(StrategyCacheService)),
    __metadata("design:paramtypes", [StrategyCacheService])
], InMemoryStorageStrategy);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InMemoryStorageStrategy, [{
        type: Injectable
    }], function () { return [{ type: StrategyCacheService, decorators: [{
                type: Inject,
                args: [StrategyCacheService]
            }] }]; }, null); })();
export { InMemoryStorageStrategy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnkuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtd2Vic3RvcmFnZS9saWIvc3RyYXRlZ2llcy9pbk1lbW9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxPQUFPLEVBQWEsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUdqRCxJQUFhLHVCQUF1QiwrQkFBcEMsTUFBYSx1QkFBdUI7QUFBRyxJQU10QyxZQUFvRCxLQUEyQjtBQUFJLFFBQS9CLFVBQUssR0FBTCxLQUFLLENBQXNCO0FBQUMsUUFKdkUsZUFBVSxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ3RELFFBQUMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7QUFDN0IsUUFBVSxTQUFJLEdBQVcseUJBQXVCLENBQUMsWUFBWSxDQUFDO0FBQzlELElBQ21GLENBQUM7QUFDcEYsSUFDQyxHQUFHLENBQUMsR0FBVztBQUFJLFFBQ2xCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxJQUFDLENBQUM7QUFDRixJQUNDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBVTtBQUFJLFFBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLFFBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUIsUUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQixJQUFDLENBQUM7QUFDRixJQUNDLEdBQUcsQ0FBQyxHQUFXO0FBQUksUUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqQyxRQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLFFBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBQ0YsSUFDQyxLQUFLO0FBQUssUUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsUUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixRQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xCLElBQUMsQ0FBQztBQUNGLENBQ0M7O3FJQUFBO0FBN0JnQixvQ0FBWSxHQUFXLGlCQUFpQixDQUFDLFFBQVEsQ0FBQztBQUNuRTtBQUFpRCxZQUlXLG9CQUFvQix1QkFBbEUsTUFBTSxTQUFDLG9CQUFvQjtBQUFRO0FBTnBDLHVCQUF1QixnREFEbkMsVUFBVSxFQUFFLGpCQUNULENBTVUsV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUFFLHFDQUFnQixvQkFBb0I7QUFBRyxHQU50RSx1QkFBdUIsQ0E4Qm5DOzs7Ozs7a0NBQ0Q7QUFBQyxTQS9CWSx1QkFBdUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvc3RvcmFnZVN0cmF0ZWd5JztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2YsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtTdHJhdGVneUNhY2hlU2VydmljZX0gZnJvbSAnLi4vY29yZS9zdHJhdGVneUNhY2hlJztcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbk1lbW9yeVN0b3JhZ2VTdHJhdGVneSBpbXBsZW1lbnRzIFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcblx0c3RhdGljIHJlYWRvbmx5IHN0cmF0ZWd5TmFtZTogc3RyaW5nID0gU3RvcmFnZVN0cmF0ZWdpZXMuSW5NZW1vcnk7XG5cdHJlYWRvbmx5IGtleUNoYW5nZXM6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG5cdGlzQXZhaWxhYmxlOiBib29sZWFuID0gdHJ1ZTtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nID0gSW5NZW1vcnlTdG9yYWdlU3RyYXRlZ3kuc3RyYXRlZ3lOYW1lO1xuXG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoU3RyYXRlZ3lDYWNoZVNlcnZpY2UpIHByb3RlY3RlZCBjYWNoZTogU3RyYXRlZ3lDYWNoZVNlcnZpY2UpIHt9XG5cblx0Z2V0KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcblx0XHRyZXR1cm4gb2YodGhpcy5jYWNoZS5nZXQodGhpcy5uYW1lLCBrZXkpKTtcblx0fVxuXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG5cdFx0dGhpcy5jYWNoZS5zZXQodGhpcy5uYW1lLCBrZXksIHZhbHVlKTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xuXHRcdHJldHVybiBvZih2YWx1ZSk7XG5cdH1cblxuXHRkZWwoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcblx0XHR0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGtleSk7XG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcblx0XHRyZXR1cm4gb2YobnVsbCk7XG5cdH1cblxuXHRjbGVhcigpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcblx0XHR0aGlzLmNhY2hlLmNsZWFyKHRoaXMubmFtZSk7XG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQobnVsbCk7XG5cdFx0cmV0dXJuIG9mKG51bGwpO1xuXHR9XG5cbn1cbiJdfQ==