import { AfterViewInit, ElementRef, NgZone, OnDestroy, InjectionToken } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Events } from './Events';
import * as ɵngcc0 from '@angular/core';
export declare const TINYMCE_SCRIPT_SRC: InjectionToken<string>;
export declare class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {
    private platformId;
    private tinymceScriptSrc?;
    cloudChannel: string;
    apiKey: string;
    init: Record<string, any> | undefined;
    id: string;
    initialValue: string | undefined;
    outputFormat: 'html' | 'text' | undefined;
    inline: boolean | undefined;
    tagName: string | undefined;
    plugins: string | undefined;
    toolbar: string | string[] | undefined;
    modelEvents: string;
    allowedEvents: string | string[] | undefined;
    ignoreEvents: string | string[] | undefined;
    set disabled(val: boolean);
    get disabled(): boolean;
    get editor(): any;
    ngZone: NgZone;
    private _elementRef;
    private _element;
    private _disabled;
    private _editor;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(elementRef: ElementRef, ngZone: NgZone, platformId: Object, tinymceScriptSrc?: string);
    writeValue(value: string | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    createElement(): void;
    initialise(): void;
    private getScriptSrc;
    private initEditor;
    private emitOnChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditorComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditorComponent, "editor", never, { "cloudChannel": "cloudChannel"; "apiKey": "apiKey"; "id": "id"; "modelEvents": "modelEvents"; "disabled": "disabled"; "initialValue": "initialValue"; "init": "init"; "inline": "inline"; "outputFormat": "outputFormat"; "tagName": "tagName"; "plugins": "plugins"; "toolbar": "toolbar"; "allowedEvents": "allowedEvents"; "ignoreEvents": "ignoreEvents"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJlZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9FdmVudHMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgVElOWU1DRV9TQ1JJUFRfU1JDOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRWRpdG9yQ29tcG9uZW50IGV4dGVuZHMgRXZlbnRzIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgdGlueW1jZVNjcmlwdFNyYz87XG4gICAgY2xvdWRDaGFubmVsOiBzdHJpbmc7XG4gICAgYXBpS2V5OiBzdHJpbmc7XG4gICAgaW5pdDogUmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZDtcbiAgICBpZDogc3RyaW5nO1xuICAgIGluaXRpYWxWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIG91dHB1dEZvcm1hdDogJ2h0bWwnIHwgJ3RleHQnIHwgdW5kZWZpbmVkO1xuICAgIGlubGluZTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICB0YWdOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgcGx1Z2luczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHRvb2xiYXI6IHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgIG1vZGVsRXZlbnRzOiBzdHJpbmc7XG4gICAgYWxsb3dlZEV2ZW50czogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQ7XG4gICAgaWdub3JlRXZlbnRzOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcbiAgICBzZXQgZGlzYWJsZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBnZXQgZWRpdG9yKCk6IGFueTtcbiAgICBuZ1pvbmU6IE5nWm9uZTtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX2VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfZWRpdG9yO1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHRpbnltY2VTY3JpcHRTcmM/OiBzdHJpbmcpO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBjcmVhdGVFbGVtZW50KCk6IHZvaWQ7XG4gICAgaW5pdGlhbGlzZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0U2NyaXB0U3JjO1xuICAgIHByaXZhdGUgaW5pdEVkaXRvcjtcbiAgICBwcml2YXRlIGVtaXRPbkNoYW5nZTtcbn1cbiJdfQ==